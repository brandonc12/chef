
# Author:: Tyler Cloke (<tyler@chef.io>)
# Copyright:: Copyright (c) 2015 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'chef/knife'

class Chef
  class Knife
    # Parent class to UserKeyCreate and ClientKeyCreate,
    # should never be called on its own, please use subclasses.
    # Implements common functionality of knife [user | org client] key create.
    #
    # @author Tyler Cloke
    class KeyCreate < Knife
      deps do
        require 'chef/key'
        require 'chef/json_compat'
      end

      option :public_key,
        :short => "-p FILENAME",
        :long => "--public-key FILENAME",
        :description => "Public key for newly created key. If not passed, the server will create a key pair for you, but you must pass --key-name NAME in that case."

      option :file,
        :short => "-f FILE",
        :long  => "--file FILE",
        :description => "Write the private key to a file, if you requested the server to create one."

      option :key_name,
        :short => "-k NAME",
        :long  => "--key-name NAME",
        :description => "The name for your key. If you do not pass a name, you must pass --public-key, and the name will default to the fingerprint of the public key passed."

      def public_key_or_key_name_error_msg
<<EOS
You must pass either --public-key or --key-name, or both.
If you only pass --public-key, a key name will be generated from the fingerprint of your key.
If you only pass --key-name, a key pair will be generated by the server.
EOS
      end

      def run
        @actor = @name_args[0]

        if @actor.nil?
          show_usage
          if actor_field_name == 'user'
            ui.fatal('You must specify a user name')
          else
            ui.fatal('You must specify a client name')
          end
          exit 1
        end

        # actor field name is implemented in UserKeyCreate and ClientKeyCreate subclasses
        key = Chef::Key.new(@actor, actor_field_name)
        if !config[:public_key] && !config[:key_name]
          show_usage
          ui.fatal(public_key_or_key_name_error_msg)
          exit 1
        end

        if config[:public_key]
          key.public_key File.read(File.expand_path(config[:public_key]))
        end

        if config[:key_name]
          key.key_name config[:key_name]
        end

        output = edit_data(key)
        key = Chef::Key.from_hash(output).create

        ui.info("Created #{key}")
        if key.private_key
          if config[:file]
            File.open(config[:file], "w") do |f|
              f.print(key.private_key)
            end
          else
            ui.msg key.private_key
          end
        end

      end
    end
  end
end
